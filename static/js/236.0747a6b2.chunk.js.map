{"version":3,"file":"static/js/236.0747a6b2.chunk.js","mappings":"kTAGaA,EAAYC,EAAAA,QAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sNAaxBC,GAAYH,EAAAA,EAAAA,SAAOI,EAAAA,GAAPJ,CAAaK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sQAezBI,EAAcN,EAAAA,QAAAA,QAAcO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,6DAK5BM,EAAgBR,EAAAA,QAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,mEAM1BQ,GAAYV,EAAAA,EAAAA,SAAOW,EAAAA,GAAPX,CAAYY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,oR,sECxCxBW,E,QAAab,OAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+G,sJCMvBY,EAAe,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACIC,EAAAA,EAAAA,KAACX,EAAAA,GAAW,CAAAY,UACRD,EAAAA,EAAAA,KAACT,EAAAA,GAAa,CAAAU,UACVD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACPC,cAAe,CACXC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEdC,iBAAkBC,EAAAA,GAAW,CACzBJ,KAAMI,EAAAA,KACDC,IAAI,GAAI,iCACRC,SAAS,YACdL,MAAOG,EAAAA,KACFH,MAAM,yBACNK,SAAS,YACdJ,SAAUE,EAAAA,KACLE,SAAS,yBACTC,IAAI,EAAG,sDACPC,QAAQ,WAAY,8CAE7BC,SA1BS,SAACC,EAAKC,GAAqB,IAAjBC,EAASD,EAATC,UAC3BlB,GAASmB,EAAAA,EAAAA,UAASH,IAClBE,GACJ,EAuBmCf,SAEtB,SAAAiB,GAAA,IAAGC,EAAYD,EAAZC,aAAcC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAAO,OAC7BC,EAAAA,EAAAA,MAAC7B,EAAAA,GAAS,CAAAQ,SAAA,EACNqB,EAAAA,EAAAA,MAACxC,EAAAA,GAAS,CAACyC,QAAQ,WAAUtB,SAAA,CAAC,YAC1BD,EAAAA,EAAAA,KAACd,EAAAA,GAAS,CAACsC,KAAK,OAAOpB,KAAK,SAC3BgB,EAAOhB,MAAQiB,EAAQjB,MAAQJ,EAAAA,EAAAA,KAACJ,EAAAA,EAAU,CAAAK,SAAEmB,EAAOhB,OAAsB,SAE9EkB,EAAAA,EAAAA,MAACxC,EAAAA,GAAS,CAACyC,QAAQ,eAActB,SAAA,CAAC,iBAC9BD,EAAAA,EAAAA,KAACd,EAAAA,GAAS,CAACsC,KAAK,QAAQpB,KAAK,UAC5BgB,EAAOf,OAASgB,EAAQhB,OAASL,EAAAA,EAAAA,KAACJ,EAAAA,EAAU,CAAAK,SAAEmB,EAAOf,QAAuB,SAGjFiB,EAAAA,EAAAA,MAACxC,EAAAA,GAAS,CAACyC,QAAQ,WAAUtB,SAAA,CAAC,YAC1BD,EAAAA,EAAAA,KAACd,EAAAA,GAAS,CAACsC,KAAK,WAAWpB,KAAK,aAC/BgB,EAAOd,UAAYe,EAAQf,UAAYN,EAAAA,EAAAA,KAACJ,EAAAA,EAAU,CAAAK,SAAEmB,EAAOd,WAA0B,SAG1FN,EAAAA,EAAAA,KAACyB,EAAAA,GAAa,CAACD,KAAK,SAASE,SAAUP,EAAalB,SAAC,aAG7C,OAOhC,E,UC9De,SAAS0B,IACpB,OACIL,EAAAA,EAAAA,MAAAM,EAAAA,SAAA,CAAA3B,SAAA,EACID,EAAAA,EAAAA,KAAC6B,EAAAA,EAAM,CAAA5B,UACHD,EAAAA,EAAAA,KAAA,SAAAC,SAAO,oBAEXD,EAAAA,EAAAA,KAACH,EAAY,MAGzB,C","sources":["components/ContactAdded/ContactAdded.styled.jsx","components/Validation/Validation.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const LabelForm = styled.label`\n\n    color: #353535;\n\tfont-size: 1.5em;\n\tjustify-content: center;\n\tdisplay: flex;\n    align-items: center;\n    flex-direction: column;\n\tfont-weight: 500;\n\ttransition: .5s ease-in-out;\n    \n`;\n\nexport const FormInput = styled(Field)`\n    width: 70%;\n\theight: 20px;\n\tbackground: #e0dede;\n\tjustify-content: center;\n\tdisplay: flex;\n    margin-top: 20px;\n    margin-left: auto;\n    margin-right: auto;\n\tpadding: 10px;\n\tborder: none;\n\toutline: none;\n\tborder-radius: 5px;\n`;\n\nexport const SectionForm = styled.section`\n    padding-top: 15px;\n    padding-bottom: 15px;\n`;\n\nexport const ContainerForm = styled.div`\n    padding-left: 15px;\n    padding-right: 15px;\n    \n`;\n\nexport const FormBlock = styled(Form)`\n    max-width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n    border: 2px solid #4e4d4d;\n    border-radius: 5px;\n    box-shadow: rgba(6, 24, 44, 0.4) 0px 0px 0px 2px, rgba(6, 24, 44, 0.65) 0px 4px 6px -1px, rgba(255, 255, 255, 0.08) 0px 1px 0px inset;\n`;\n\n\n\n","import { styled } from \"styled-components\";\n\nexport const Validation = styled.div`\n    font-size: 14px;\n    font-weight: 400;\n    padding: 10px;\n    color: #ff0000;\n    margin: 0;\n`;","import { ButtonContact } from 'components/Button/Button.styled';\nimport { ContainerForm, SectionForm, FormBlock, FormInput, LabelForm } from 'components/ContactAdded/ContactAdded.styled';\nimport { Validation } from 'components/Validation/Validation.styled';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport * as Yup from 'yup';\n\nexport const RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = (event, { resetForm }) => {\n        dispatch(register(event));\n        resetForm();\n    }\n\n    return (\n        <SectionForm>\n            <ContainerForm>\n                <Formik\n                initialValues={{\n                    name: '',\n                    email: '',\n                    password: '',\n                }}\n                validationSchema={Yup.object({\n                    name: Yup.string()\n                        .max(15, 'Must be 15 characters or less')\n                        .required('Required'),\n                    email: Yup.string()\n                        .email('Invalid email address')\n                        .required('Required'),\n                    password: Yup.string()\n                        .required('No password provided.') \n                        .min(8, 'Password is too short - should be 8 chars minimum.')\n                        .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n                })}\n                onSubmit={handleSubmit}\n            >\n                {({ isSubmitting, errors, touched }) => (\n                    <FormBlock>\n                        <LabelForm htmlFor=\"userName\">Username\n                            <FormInput type=\"text\" name=\"name\" />\n                            {errors.name && touched.name ? (<Validation>{errors.name}</Validation>) : null}\n                        </LabelForm>\n                        <LabelForm htmlFor=\"emailAddress\">Email Address\n                            <FormInput type=\"email\" name=\"email\" />\n                            {errors.email && touched.email ? (<Validation>{errors.email}</Validation>) : null}\n                        </LabelForm>\n                    \n                        <LabelForm htmlFor=\"password\">Password\n                            <FormInput type=\"password\" name=\"password\" />\n                            {errors.password && touched.password ? (<Validation>{errors.password}</Validation>) : null}\n                        </LabelForm>\n                    \n                        <ButtonContact type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </ButtonContact>\n                    </FormBlock>\n                )}\n            </Formik>\n            </ContainerForm>\n        </SectionForm>\n            \n    );\n};","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Register() {\n    return (\n        <>\n            <Helmet>\n                <title>Registration</title>\n            </Helmet>\n            <RegisterForm/>\n        </>\n    )\n}"],"names":["LabelForm","styled","_templateObject","_taggedTemplateLiteral","FormInput","Field","_templateObject2","SectionForm","_templateObject3","ContainerForm","_templateObject4","FormBlock","Form","_templateObject5","Validation","RegisterForm","dispatch","useDispatch","_jsx","children","Formik","initialValues","name","email","password","validationSchema","Yup","max","required","min","matches","onSubmit","event","_ref","resetForm","register","_ref2","isSubmitting","errors","touched","_jsxs","htmlFor","type","ButtonContact","disabled","Register","_Fragment","Helmet"],"sourceRoot":""}